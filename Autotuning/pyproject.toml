[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "flamingo-autotuner"
version = "1.0.0"
description = "CUDA Autotuning System - Python 3 Modernized Version"
readme = "README.md"
license = {file = "LICENCE.txt"}
authors = [
    {name = "Original Author", email = "author@example.com"}
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research", 
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.10"
dependencies = [
    "numpy>=2.3.0",
    "matplotlib>=3.6.0",
    "pandas>=2.3.0",
    "pyyaml>=6.0",
    "tomli>=2.0.0",
    "typing-extensions>=4.4.0",
    "rich>=14.0.0",
    "click>=8.1.0",
    "typer>=0.9.0",
    "textual>=4.0.0",
    "pydantic>=2.0.0",
    "pluggy>=1.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "mypy>=1.0.0",
    "black>=25.1.0",
    "isort>=6.0.1",
    "flake8>=7.3.0",
    "pre-commit>=4.2.0",
]
docs = [
    "sphinx>=8.2.3",
    "sphinx-rtd-theme>=3.0.2",
    "sphinx-autodoc-typehints>=3.2.0",
]

[project.scripts]
autotune = "flamingo.cli:main"
flamingo = "flamingo.cli:main"
flamingo-plot = "flamingo.utilities.plotting:main"
flamingo-migrate = "flamingo.migration:main"
flamingo-plugin = "flamingo.plugins:main"
flamingo-tui = "flamingo.tui:main"

[project.urls]
Homepage = "https://github.com/example/flamingo-autotuner"
Documentation = "https://flamingo-autotuner.readthedocs.io/"
Repository = "https://github.com/example/flamingo-autotuner.git"
"Bug Tracker" = "https://github.com/example/flamingo-autotuner/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["flamingo*", "tuner*", "utilities*"]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["flamingo", "tuner", "utilities"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=flamingo --cov=tuner --cov=utilities"
testpaths = [
    "tests",
    "tuner/test_evaluations.py",
    "tuner/testing.py"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = [".", "tuner", "utilities"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "examples/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]