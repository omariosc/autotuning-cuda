name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        cd Autotuning
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"
    
    - name: Lint with flake8
      run: |
        cd Autotuning
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      run: |
        cd Autotuning
        mypy flamingo/ tuner/ utilities/ --ignore-missing-imports
    
    - name: Test with pytest
      run: |
        cd Autotuning
        pytest --cov=flamingo --cov=tuner --cov=utilities --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./Autotuning/coverage.xml
        flags: unittests
        name: codecov-umbrella

  docker:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        cd Autotuning
        docker build -t flamingo:test .
    
    - name: Test Docker image
      run: |
        cd Autotuning
        docker run --rm flamingo:test flamingo --version

  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install documentation dependencies
      run: |
        cd Autotuning
        pip install -e ".[docs]"
    
    - name: Build documentation
      run: |
        cd docs
        # Add documentation build commands here if using Sphinx
        echo "Documentation validation passed"
    
    - name: Check links in documentation
      run: |
        # Check that all documentation links are valid
        python -c "
        import os
        import re
        from pathlib import Path
        
        docs_dir = Path('docs')
        for md_file in docs_dir.glob('*.md'):
            content = md_file.read_text()
            # Check for broken relative links
            for match in re.finditer(r'\[.*?\]\((.*?)\)', content):
                link = match.group(1)
                if link.startswith('http'):
                    continue
                if not (docs_dir / link).exists() and not Path(link).exists():
                    print(f'Broken link in {md_file}: {link}')
        "